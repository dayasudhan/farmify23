generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("AWS_DATABASE_URL")
}

model Item {
  id                   Int             @id @unique @default(autoincrement())
  name                 String
  image_urls           String[]
  price                Int?
  availability         Boolean?
  description          String?
  createdAt            DateTime
  updatedAt            DateTime?
  seller_name          String?
  address              String?
  district             String?
  city                 String?
  state                String?
  zipCode              Int?
  phone                String?
  makeYear             String?
  registrationYear     String?
  hoursDriven          Int?
  no_of_owners         Int?
  vehicleNo            Int?
  dealerId             Int
  latitude             Float?
  longitude            Float?
  battery_condition    String?
  condition            String?
  fc_approximate_cost  Int?
  fitnessCertificate   Boolean?
  hypothecation_status String?
  implements           String?
  insurance_status     Boolean?
  loan_availability    Boolean?
  loan_status          String?
  make                 String?
  model                String?
  rc_present           Boolean?
  rto                  String?
  tailor_attached      Boolean?
  type                 TYPE            @default(OTHER)
  tyre_condition       String?
  advertisement        Advertisement[]
  enquiries            Enquiry[]
  dealer               Dealer          @relation(fields: [dealerId], references: [id])
  order                Order?

  @@map("item")
}

model Enquiry {
  id        Int       @id @default(autoincrement())
  name      String
  address   String?
  address2  String?
  city      String?
  state     String?
  zipCode   Int?
  phone     String
  email     String?
  itemId    Int
  createdAt DateTime
  updatedAt DateTime?
  item      Item      @relation(fields: [itemId], references: [id])

  @@map("enquiry")
}

model Order {
  id        Int       @id @default(autoincrement())
  name      String
  address   String?
  address2  String?
  city      String?
  state     String?
  zipCode   Int?
  phone     String
  email     String?
  itemId    Int       @unique
  createdAt DateTime
  updatedAt DateTime?
  item      Item      @relation(fields: [itemId], references: [id])

  @@map("order")
}

model Dealer {
  id                     Int       @id @default(autoincrement())
  username               String    @unique
  password               String
  orgpassword            String
  phone                  String
  address                String?
  district               String
  city                   String?
  state                  String
  createdAt              DateTime
  updatedAt              DateTime?
  name                   String
  deviceToken            String?   @default("")
  allowPhoneNumberToCall Boolean   @default(true)
  allowWhatsAppMessages  Boolean   @default(true)
  items                  Item[]

  @@map("dealer")
}

model User {
  name               String
  district           String?
  city               String?
  latitude           Float?
  longitude          Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  phone              String   @unique
  state              String?
  id                 Int      @id @default(autoincrement())
  deviceToken        String?
  languagePreference String?
  appVersion         String?

  @@map("user")
}

model Advertisement {
  id        Int       @id @default(autoincrement())
  title     String?
  itemId    Int?
  linkUrl   String?
  media     Json      @db.Json
  startDate DateTime  @db.Timestamp(6)
  endDate   DateTime  @db.Timestamp(6)
  active    Boolean?  @default(true)
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  item      Item?     @relation(fields: [itemId], references: [id], onUpdate: NoAction)

  @@map("advertisement")
}

enum TYPE {
  ENGINE
  TRAILER
  CULTIVATOR
  ROTAVATOR
  PLOUGH
  HARROW
  SEEDER
  SPRAYER
  LEVELLER
  DIGGER
  FULL_SET
  OTHER
}
